import { test, expect } from '@playwright/test';

test.describe('Teste - Novo t√≠tulo para estrat√©gia similar_movies', () => {
  test('deve mostrar "Este filme n√£o possui sequ√™ncia" quando estrat√©gia for similar_movies', async ({
    page,
  }) => {
    console.log('üöÄ Teste do novo t√≠tulo para similar_movies...');

    // Navegar para a p√°gina
    await page.goto('http://localhost:8080', { waitUntil: 'domcontentloaded' });

    // Configurar API se necess√°rio
    const modalExists = await page
      .locator('[role="dialog"]:has-text("Configurar API")')
      .count();

    if (modalExists > 0) {
      const apiKeyInput = page.locator('input[placeholder*="API"]');
      await apiKeyInput.fill('da143ff1f274e5987194fe5d22f71b11');

      const saveButton = page.locator('button:has-text("Confirmar e Entrar")');
      await saveButton.click();
      await page.waitForTimeout(2000);
    }

    // --- Teste para filme sem sequ√™ncias (The Shawshank Redemption) ---
    await test.step('Testando The Shawshank Redemption (novo t√≠tulo)', async () => {
      await page.goto('http://localhost:8080/filme/278', {
        waitUntil: 'domcontentloaded',
      });
      await page.waitForTimeout(5000);

      // Verificar se a se√ß√£o existe com o novo t√≠tulo
      const section = page
        .locator('text=Este filme n√£o possui sequ√™ncia')
        .first();
      await expect(section).toBeVisible();

      // Verificar se a mensagem est√° sendo exibida
      const message = page
        .locator('text=N√£o foram encontradas sequ√™ncias para este filme')
        .first();
      await expect(message).toBeVisible();

      // Verificar se a mensagem cont√©m o texto sobre explorar outras se√ß√µes
      const exploreMessage = page
        .locator('text=Explore outras se√ß√µes da p√°gina')
        .first();
      await expect(exploreMessage).toBeVisible();

      // Verificar se N√ÉO h√° cards sendo exibidos
      const movieCards = page
        .locator('text=Este filme n√£o possui sequ√™ncia')
        .first()
        .locator('xpath=..')
        .locator('xpath=..')
        .locator('.grid > div');
      const cardCount = await movieCards.count();

      console.log(
        `üìä The Shawshank Redemption: ${cardCount} cards encontrados`
      );
      expect(cardCount).toBe(0);

      // Verificar se a badge de estrat√©gia est√° sendo exibida
      const strategyBadge = page.locator('text=Filmes similares').first();
      await expect(strategyBadge).toBeVisible();

      console.log(
        '‚úÖ The Shawshank Redemption: Novo t√≠tulo exibido corretamente'
      );
    });

    // --- Teste para filme com sequ√™ncias (Star Wars) - deve manter t√≠tulo original ---
    await test.step('Testando Star Wars (t√≠tulo original)', async () => {
      await page.goto('http://localhost:8080/filme/11', {
        waitUntil: 'domcontentloaded',
      });
      await page.waitForTimeout(5000);

      // Verificar se a se√ß√£o existe com o t√≠tulo original
      const section = page.locator('text=Sequ√™ncias do Filme').first();
      await expect(section).toBeVisible();

      // Verificar se o novo t√≠tulo N√ÉO aparece
      const newTitle = page.locator('text=Este filme n√£o possui sequ√™ncia');
      await expect(newTitle).not.toBeVisible();

      console.log('‚úÖ Star Wars: T√≠tulo original mantido (correto)');
    });

    console.log('‚úÖ Todos os testes conclu√≠dos com sucesso!');
  });
});
