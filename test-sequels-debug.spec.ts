import { test, expect } from '@playwright/test';

test.describe('Teste - Debug da se√ß√£o de sequ√™ncias', () => {
  test('deve verificar se a se√ß√£o est√° sendo renderizada', async ({ page }) => {
    console.log('üöÄ Teste de debug da se√ß√£o de sequ√™ncias...');

    // Configurar captura de logs do console
    page.on('console', (msg) => {
      console.log(`Browser console: ${msg.text()}`);
    });

    // Navegar para a p√°gina
    await page.goto('http://localhost:8080', { waitUntil: 'domcontentloaded' });

    // Configurar API se necess√°rio
    const modalExists = await page
      .locator('[role="dialog"]:has-text("Configurar API")')
      .count();

    if (modalExists > 0) {
      const apiKeyInput = page.locator('input[placeholder*="API"]');
      await apiKeyInput.fill('da143ff1f274e5987194fe5d22f71b11');

      const saveButton = page.locator('button:has-text("Confirmar e Entrar")');
      await saveButton.click();
      await page.waitForTimeout(2000);
    }

    // --- Teste para filme sem sequ√™ncias (The Shawshank Redemption) ---
    await test.step('Testando The Shawshank Redemption (debug)', async () => {
      await page.goto('http://localhost:8080/filme/278', {
        waitUntil: 'domcontentloaded',
      });
      await page.waitForTimeout(5000);

      // Verificar se existe alguma se√ß√£o relacionada a sequ√™ncias
      const sequelsSection = page
        .locator('text=Sequ√™ncias do Filme, text=Sugest√£o com Base neste filme')
        .first();
      const sectionExists = await sequelsSection.count();
      console.log(
        `üìä Se√ß√£o de sequ√™ncias encontrada: ${
          sectionExists > 0 ? 'Sim' : 'N√£o'
        }`
      );

      if (sectionExists > 0) {
        // Verificar o t√≠tulo da se√ß√£o
        const title = await sequelsSection.textContent();
        console.log(`üìä T√≠tulo da se√ß√£o: ${title}`);

        // Verificar se h√° mensagem de "sem sequ√™ncias"
        const noSequelsMessage = page
          .locator('text=N√£o foram encontradas sequ√™ncias para este filme')
          .first();
        const messageExists = await noSequelsMessage.count();
        console.log(
          `üìä Mensagem de "sem sequ√™ncias" encontrada: ${
            messageExists > 0 ? 'Sim' : 'N√£o'
          }`
        );

        // Verificar se h√° cards
        const movieCards = sequelsSection
          .locator('xpath=..')
          .locator('xpath=..')
          .locator('.grid > div');
        const cardCount = await movieCards.count();
        console.log(`üìä Cards encontrados: ${cardCount}`);

        // Verificar se h√° badge de estrat√©gia
        const strategyBadge = page.locator('text=Filmes similares').first();
        const badgeExists = await strategyBadge.count();
        console.log(
          `üìä Badge de estrat√©gia encontrada: ${
            badgeExists > 0 ? 'Sim' : 'N√£o'
          }`
        );
      } else {
        console.log('‚ùå Se√ß√£o de sequ√™ncias n√£o encontrada');
      }

      // Verificar se h√° outras se√ß√µes na p√°gina
      const allSections = page.locator('h3, h2, h1').all();
      const sections = await allSections;
      console.log('üìä Se√ß√µes encontradas na p√°gina:');
      for (const section of sections) {
        const text = await section.textContent();
        if (text) {
          console.log(`  - ${text}`);
        }
      }
    });

    console.log('‚úÖ Teste de debug conclu√≠do!');
  });
});
