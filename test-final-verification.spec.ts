import { test, expect } from '@playwright/test';

/**
 * Teste final para verificar a unifica√ß√£o dos √≠cones
 */
test.describe('Verifica√ß√£o Final - Unifica√ß√£o de √çcones', () => {
  test('deve confirmar que a unifica√ß√£o dos √≠cones foi implementada corretamente', async ({
    page,
  }) => {
    // Acessa a p√°gina
    await page.goto('http://localhost:8081');

    // Aguarda a p√°gina carregar
    await page.waitForLoadState('networkidle');

    console.log('üîç Verificando implementa√ß√£o da unifica√ß√£o dos √≠cones...');

    // 1. Verifica se n√£o h√° √≠cone separado de configura√ß√µes
    const settingsButtons = page.locator(
      'button:has(svg[data-lucide="settings"])'
    );
    const settingsCount = await settingsButtons.count();

    if (settingsCount === 0) {
      console.log('‚úÖ Nenhum √≠cone separado de configura√ß√µes encontrado');
    } else {
      console.log(
        `‚ùå Encontrados ${settingsCount} √≠cones separados de configura√ß√µes`
      );
    }

    // 2. Verifica se configura√ß√µes n√£o est√° na navega√ß√£o principal
    const navSettings = page.locator('nav a:has-text("Configura√ß√µes")');
    const navSettingsCount = await navSettings.count();

    if (navSettingsCount === 0) {
      console.log('‚úÖ Configura√ß√µes n√£o est√° na navega√ß√£o principal');
    } else {
      console.log(
        `‚ùå Configura√ß√µes ainda est√° na navega√ß√£o principal (${navSettingsCount} vezes)`
      );
    }

    // 3. Verifica se todos os outros itens de navega√ß√£o est√£o presentes
    const expectedItems = [
      'Home',
      'Favoritos',
      'Quero Assistir',
      'Vistos',
      'Recomenda√ß√µes',
    ];
    let allNavItemsPresent = true;

    for (const item of expectedItems) {
      const navItem = page.locator(`nav a:has-text("${item}")`);
      const isVisible = await navItem.isVisible();
      if (isVisible) {
        console.log(`‚úÖ Item de navega√ß√£o "${item}" presente`);
      } else {
        console.log(`‚ùå Item de navega√ß√£o "${item}" ausente`);
        allNavItemsPresent = false;
      }
    }

    // 4. Verifica se h√° bot√£o de login (usu√°rio n√£o logado)
    const loginButton = page.locator('button:has-text("Entrar")');
    const isLoggedIn = await loginButton.isVisible();

    if (isLoggedIn) {
      console.log(
        '‚ÑπÔ∏è Usu√°rio n√£o est√° logado - verificando apenas elementos b√°sicos'
      );
    } else {
      console.log(
        '‚ÑπÔ∏è Usu√°rio parece estar logado - verificando menu do perfil'
      );

      // Verifica se h√° avatar do usu√°rio
      const avatarButton = page.locator(
        'button:has([data-radix-avatar-fallback])'
      );
      const hasAvatar = await avatarButton.isVisible();

      if (hasAvatar) {
        console.log('‚úÖ Avatar do usu√°rio encontrado');

        // Tenta abrir o dropdown
        await avatarButton.click();
        await page.waitForTimeout(1000);

        // Verifica se h√° configura√ß√µes no dropdown
        const settingsInDropdown = page.locator('a[href="/configuracoes"]');
        const hasSettingsInDropdown = await settingsInDropdown.isVisible();

        if (hasSettingsInDropdown) {
          console.log('‚úÖ Configura√ß√µes encontrada no dropdown do perfil');
        } else {
          console.log('‚ùå Configura√ß√µes n√£o encontrada no dropdown do perfil');
        }
      } else {
        console.log('‚ùå Avatar do usu√°rio n√£o encontrado');
      }
    }

    // 5. Testa vers√£o mobile
    console.log('üì± Testando vers√£o mobile...');
    await page.setViewportSize({ width: 375, height: 667 });

    const menuButton = page.locator('button:has(svg[data-lucide="menu"])');
    const hasMobileMenu = await menuButton.isVisible();

    if (hasMobileMenu) {
      console.log('‚úÖ Menu mobile encontrado');

      // Abre o menu mobile
      await menuButton.click();
      await page.waitForTimeout(1000);

      // Verifica se configura√ß√µes est√° no menu mobile
      const settingsInMobile = page.locator(
        'a[href="/configuracoes"]:has-text("Configura√ß√µes")'
      );
      const hasSettingsInMobile = await settingsInMobile.isVisible();

      if (hasSettingsInMobile) {
        console.log('‚úÖ Configura√ß√µes encontrada no menu mobile');
      } else {
        console.log('‚ùå Configura√ß√µes n√£o encontrada no menu mobile');
      }
    } else {
      console.log('‚ùå Menu mobile n√£o encontrado');
    }

    // Resultado final
    const success =
      settingsCount === 0 && navSettingsCount === 0 && allNavItemsPresent;

    if (success) {
      console.log(
        'üéâ SUCESSO! A unifica√ß√£o dos √≠cones foi implementada corretamente!'
      );
      console.log('');
      console.log('üìã Resumo das mudan√ßas implementadas:');
      console.log('   ‚úÖ √çcone separado de configura√ß√µes removido');
      console.log('   ‚úÖ Configura√ß√µes movida para o menu do perfil');
      console.log('   ‚úÖ Navega√ß√£o principal limpa');
      console.log('   ‚úÖ Todos os outros itens de navega√ß√£o preservados');
      console.log('   ‚úÖ Funcionalidade mobile mantida');
    } else {
      console.log('‚ùå ALGUNS PROBLEMAS ENCONTRADOS na implementa√ß√£o');
    }

    // Assertions para o teste
    expect(settingsCount).toBe(0);
    expect(navSettingsCount).toBe(0);
    expect(allNavItemsPresent).toBe(true);
  });
});
