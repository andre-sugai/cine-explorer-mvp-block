import { test, expect } from '@playwright/test';

test.describe('Teste - Funcionalidade final de sequÃªncias', () => {
  test('deve funcionar corretamente para filmes com e sem sequÃªncias', async ({
    page,
  }) => {
    console.log('ğŸš€ Teste final da funcionalidade de sequÃªncias...');

    // Navegar para a pÃ¡gina
    await page.goto('http://localhost:8080', { waitUntil: 'domcontentloaded' });

    // Configurar API se necessÃ¡rio
    const modalExists = await page
      .locator('[role="dialog"]:has-text("Configurar API")')
      .count();

    if (modalExists > 0) {
      const apiKeyInput = page.locator('input[placeholder*="API"]');
      await apiKeyInput.fill('da143ff1f274e5987194fe5d22f71b11');

      const saveButton = page.locator('button:has-text("Confirmar e Entrar")');
      await saveButton.click();
      await page.waitForTimeout(2000);
    }

    // --- Teste para filme sem sequÃªncias (The Shawshank Redemption) ---
    await test.step('Testando The Shawshank Redemption (sem sequÃªncias)', async () => {
      await page.goto('http://localhost:8080/filme/278', {
        waitUntil: 'domcontentloaded',
      });
      await page.waitForTimeout(5000);

      // Verificar se a seÃ§Ã£o existe
      const section = page.locator('text=SequÃªncias do Filme').first();
      await expect(section).toBeVisible();

      // Verificar se a mensagem estÃ¡ sendo exibida
      const message = page
        .locator('text=NÃ£o foram encontradas sequÃªncias para este filme')
        .first();
      await expect(message).toBeVisible();

      // Verificar se a mensagem contÃ©m o texto sobre explorar outras seÃ§Ãµes
      const exploreMessage = page
        .locator('text=Explore outras seÃ§Ãµes da pÃ¡gina')
        .first();
      await expect(exploreMessage).toBeVisible();

      // Verificar se NÃƒO hÃ¡ cards sendo exibidos
      const movieCards = page
        .locator('text=SequÃªncias do Filme')
        .first()
        .locator('xpath=..')
        .locator('xpath=..')
        .locator('.grid > div');
      const cardCount = await movieCards.count();

      console.log(
        `ğŸ“Š The Shawshank Redemption: ${cardCount} cards encontrados`
      );
      expect(cardCount).toBe(0);

      console.log(
        'âœ… The Shawshank Redemption: Sem cards, apenas mensagem (correto)'
      );
    });

    // --- Teste para filme com sequÃªncias (Star Wars) ---
    await test.step('Testando Star Wars (com sequÃªncias)', async () => {
      await page.goto('http://localhost:8080/filme/11', {
        waitUntil: 'domcontentloaded',
      });
      await page.waitForTimeout(5000);

      // Verificar se a seÃ§Ã£o existe
      const section = page.locator('text=SequÃªncias do Filme').first();
      await expect(section).toBeVisible();

      // Verificar se hÃ¡ cards sendo exibidos
      const movieCards = page
        .locator('text=SequÃªncias do Filme')
        .first()
        .locator('xpath=..')
        .locator('xpath=..')
        .locator('.grid > div');
      const cardCount = await movieCards.count();

      console.log(`ğŸ“Š Star Wars: ${cardCount} sequÃªncias exibidas`);
      expect(cardCount).toBeGreaterThan(0);

      // Verificar se a mensagem de "sem sequÃªncias" NÃƒO aparece
      const noSequelsMessage = page.locator(
        'text=NÃ£o foram encontradas sequÃªncias para este filme'
      );
      await expect(noSequelsMessage).not.toBeVisible();

      // Verificar se a mensagem sobre explorar outras seÃ§Ãµes NÃƒO aparece
      const exploreMessage = page.locator(
        'text=Explore outras seÃ§Ãµes da pÃ¡gina'
      );
      await expect(exploreMessage).not.toBeVisible();

      console.log('âœ… Star Wars: Com cards (correto)');
    });

    console.log('âœ… Todos os testes concluÃ­dos com sucesso!');
  });
});
